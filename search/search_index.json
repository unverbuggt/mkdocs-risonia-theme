{"config": {"indexing": "full", "lang": ["en", "de"], "min_search_length": 3, "prebuild_index": false, "separator": "[\\s\\-]+"}, "docs": [{"location": "", "text": "A simple theme for MkDocs . Based on this demo using the w3.css framework and configurable color schemes (inspiration here ). Design goals Be a simple starting point for modifications. Be colorful and readable. Implement all features of the standard MkDocs theme (in progress). Integrate some useful plugins. Don't require translations. Don't be obfuscated. Add as little nonsense as possible. Ugly compromises To use w3css we need to add additional classes to the markdown output. The good part is, while we're at it, we are also able to mark externals links. The SVG icons need to be included in every page, because otherwise they can't be set to the text color. Features Light and dark mode. Integration of mkdocs-static-i18n plugin. Integration of mkdocs-encryptcontent-plugin . Web app support. Rather lightweight Short (nav) and long (top panel) page titles Installation Install the package with pip: pip install mkdocs-risonia-theme Install the package from source with pip: cd mkdocs-risonia-theme/ python setup.py sdist bdist_wheel pip install dist/mkdocs_risonia_theme-0.1.12-py3-none-any.whl Configuration Enable the theme and plugins in your mkdocs.yml : theme: name: risonia #custom_dir: theme_override/ # add static files or overrides #logo: img/logo.svg # if undefined a burger symbol is displayed on mobile devices #favicon: img/logo.ico # if undefined img/favicon.ico is used #manifest: manifest.json # manifest for installable webapp #serviceworker: service-worker.js # for webapp an empty file is sufficient #extlink: true # mark external links with symbol #extblank: true # send external links to new browser tab #toc_sidebar: true # If display is wide enough, then display TOC on the right side #zoom_img: true # click on images to view them bigger plugins: - search: {} #- i18n: {...} # mkdocs-static-i18n - color-theme: # optional theme_color: '#ff6600' # primary color secondary_color: 'complementary' # can be a color or scheme #extra_css_light: # list of extra CSS for light mode # - 'css/additional-light.css' #extra_css_dark: # list of extra CSS for dark mode # - 'css/additional-dark.css' - w3css-classes: {} # mandatory #- encryptcontent: {...} # mkdocs-encryptcontent-plugin Overrides The file main.html in custom_dir can be used to further customize the template: {% extends \"base.html\" %} {% block exec_script %} <script> var DOMContentLoaded_fired = false; </script> <script id=\"theme\"> function runWhenDOMContentLoaded() { document.querySelectorAll('pre code').forEach((el) => { hljs.highlightElement(el); }); document.querySelectorAll('table').forEach(function(table) { if (!table.hasAttribute('Tablesort')) { new Tablesort(table); table.setAttribute('Tablesort', ''); } }); } if (DOMContentLoaded_fired) { runWhenDOMContentLoaded(); } </script> <script> document.addEventListener('DOMContentLoaded',function(){ DOMContentLoaded_fired=true; runWhenDOMContentLoaded(); }); </script> {% endblock %} {%- block footer_ext %} <p class=\"w3-right w3-tiny\"> {%- if i18n_config and i18n_page_file_locale %} <a href=\"{{ (i18n_page_locale + '/imprint/') | url }}\">Imprint</a> {%- else %} <a href=\"{{ 'imprint/' | url }}\">Impressum</a> {%- endif %} </p> {%- endblock %} {%- block top_buttons %} <a class=\"w3-button w3-theme-d1 w3-hover-theme w3-padding-small w3-right no-print\" href=\"{{ config.repo_url }}\" target=\"_blank\">&lt;/&gt;</a> {%- endblock %} Page titles Normally nav page titles would override # heading or title meta tag. But in this theme the title meta tag will always be used for the top panel if defined. For example define the navigation: nav: - Short title: 'index.md' And within index.md you define the long title like this: title: Long long long title", "title": "Risonia theme"}, {"location": "#design-goals", "text": "Be a simple starting point for modifications. Be colorful and readable. Implement all features of the standard MkDocs theme (in progress). Integrate some useful plugins. Don't require translations. Don't be obfuscated. Add as little nonsense as possible.", "title": "Design goals"}, {"location": "#ugly-compromises", "text": "To use w3css we need to add additional classes to the markdown output. The good part is, while we're at it, we are also able to mark externals links. The SVG icons need to be included in every page, because otherwise they can't be set to the text color.", "title": "Ugly compromises"}, {"location": "#features", "text": "Light and dark mode. Integration of mkdocs-static-i18n plugin. Integration of mkdocs-encryptcontent-plugin . Web app support. Rather lightweight Short (nav) and long (top panel) page titles", "title": "Features"}, {"location": "#installation", "text": "Install the package with pip: pip install mkdocs-risonia-theme Install the package from source with pip: cd mkdocs-risonia-theme/ python setup.py sdist bdist_wheel pip install dist/mkdocs_risonia_theme-0.1.12-py3-none-any.whl", "title": "Installation"}, {"location": "#configuration", "text": "Enable the theme and plugins in your mkdocs.yml : theme: name: risonia #custom_dir: theme_override/ # add static files or overrides #logo: img/logo.svg # if undefined a burger symbol is displayed on mobile devices #favicon: img/logo.ico # if undefined img/favicon.ico is used #manifest: manifest.json # manifest for installable webapp #serviceworker: service-worker.js # for webapp an empty file is sufficient #extlink: true # mark external links with symbol #extblank: true # send external links to new browser tab #toc_sidebar: true # If display is wide enough, then display TOC on the right side #zoom_img: true # click on images to view them bigger plugins: - search: {} #- i18n: {...} # mkdocs-static-i18n - color-theme: # optional theme_color: '#ff6600' # primary color secondary_color: 'complementary' # can be a color or scheme #extra_css_light: # list of extra CSS for light mode # - 'css/additional-light.css' #extra_css_dark: # list of extra CSS for dark mode # - 'css/additional-dark.css' - w3css-classes: {} # mandatory #- encryptcontent: {...} # mkdocs-encryptcontent-plugin", "title": "Configuration"}, {"location": "#overrides", "text": "The file main.html in custom_dir can be used to further customize the template: {% extends \"base.html\" %} {% block exec_script %} <script> var DOMContentLoaded_fired = false; </script> <script id=\"theme\"> function runWhenDOMContentLoaded() { document.querySelectorAll('pre code').forEach((el) => { hljs.highlightElement(el); }); document.querySelectorAll('table').forEach(function(table) { if (!table.hasAttribute('Tablesort')) { new Tablesort(table); table.setAttribute('Tablesort', ''); } }); } if (DOMContentLoaded_fired) { runWhenDOMContentLoaded(); } </script> <script> document.addEventListener('DOMContentLoaded',function(){ DOMContentLoaded_fired=true; runWhenDOMContentLoaded(); }); </script> {% endblock %} {%- block footer_ext %} <p class=\"w3-right w3-tiny\"> {%- if i18n_config and i18n_page_file_locale %} <a href=\"{{ (i18n_page_locale + '/imprint/') | url }}\">Imprint</a> {%- else %} <a href=\"{{ 'imprint/' | url }}\">Impressum</a> {%- endif %} </p> {%- endblock %} {%- block top_buttons %} <a class=\"w3-button w3-theme-d1 w3-hover-theme w3-padding-small w3-right no-print\" href=\"{{ config.repo_url }}\" target=\"_blank\">&lt;/&gt;</a> {%- endblock %}", "title": "Overrides"}, {"location": "#page-titles", "text": "Normally nav page titles would override # heading or title meta tag. But in this theme the title meta tag will always be used for the top panel if defined. For example define the navigation: nav: - Short title: 'index.md' And within index.md you define the long title like this: title: Long long long title", "title": "Page titles"}, {"location": "encryptcontent_5;cAKhYYQasOrtgcX0qZQP9w==;4BHV+IXlVMwP8Ms28a6XHQ==", "text": "GFpv3hQ5WgfOtMEJrPyP8w==;ylaFJywfh8JgwWN8yhBCIHMAPvOLjbrBKocxr3Pj1nNa4e9RxDm+VXS6FvvF9jkGbhiqMDO5vA26be11XKY6xcHFMWmHFpPcZhYuLXNl0j3UWVk/qCwke37aOvX+q6Kf9/JHAAD9azrUnZzt8/ld2nU4+q7n0tlUO1QYNBkMxpR3BXkX7aO+gr2IiMFktXFxxJjloW0082os71dFiCilnEJxVfig+E2EMf0m0fJ/wZs=", "title": "PuuF/sUw0ZUpAyu8Mc6Uvg==;uWaKEe/UOJ8z6OUSPLs1hw=="}, {"location": "markdown/", "text": "This is a title This is a heading This is a subheading This is a subsubheading (not shown in toc) This is a paragraph. Normal line breaks are ignored. You can force line breaks by adding two spaces at the end of the line (but this is invisible in some editors). But you can also force line breaks by adding a backslash at the end of the line (but this is only possible if pymdownx.escapeall: hardbreak: true is set in markdown_extensions ). Words can be highlighted in bold and italic , but underline is reserved for links. There can be code within a paragraph. That is shown inside a code window with all formatting intact. CSS classes can also be added to paragraphs ( attr_list in markdown_extensions is required). This is a citation. This is a list: Apples Pears Plums This is a numbered list: Walnuts Almonds Hazelnuts (Numbering is continued automatically) This is a table: Fruit Nuts Pulse Apples Almonds Beans Plums Walnuts Peanuts Pears Hazelnuts Peas This is an image: Furthermore inline HTML is possible: . This is how the page looks in Markdown: title: Markdown Test, TEst, tEst, test... <!-- \"title\" is shown in top bar --> # This is a title ## This is a heading ### This is a subheading #### This is a subsubheading (not shown in toc) This is a paragraph. Normal line breaks are ignored. You can force line breaks by adding two spaces at the end of the line (but this is invisible in some editors). But you can also force line breaks\\ by adding a backslash at the end of the line (but this is only possible if `pymdownx.escapeall: hardbreak: true` is set in `markdown_extensions`). Words can be highlighted in **bold** and *italic*, but [underline]() is reserved for links. There can be `code` within a paragraph. \\```plaintext That is shown inside a code window with all formatting intact. \\``` CSS classes can also be added to paragraphs (`attr_list` in `markdown_extensions` is required). { .font-lobster .w3-panel .w3-leftbar .w3-rightbar .w3-border-red } > This is a citation. This is a list: * Apples * Pears * Plums This is a numbered list: 1. Walnuts 2. Almonds 2. Hazelnuts (Numbering is continued automatically) This is a table: | Fruit | Nuts | Pulse | | ---- | ---- | ---- | | Apples | Almonds | Beans | | Plums | Walnuts | Peanuts | | Pears | Hazelnuts | Peas | This is an image: ![](../../img/logo192.png) Furthermore inline HTML is possible: <svg class=\"svg-1em\"><use xlink:href=\"#encrypted\" /></svg>. This is how the page looks in HTML: <!-- \"title\" is shown in top bar --> <h1 id=\"this-is-a-title\">This is a title</h1> <h2 id=\"this-is-a-heading\">This is a heading</h2> <h3 id=\"this-is-a-subheading\">This is a subheading</h3> <h4 id=\"this-is-a-subsubheading-not-shown-in-toc\">This is a subsubheading (not shown in toc)</h4> <p>This is a paragraph.</p> <p>Normal line breaks are ignored.</p> <p>You can force line breaks<br/> by adding two spaces at the end of the line (but this is invisible in some editors).</p> <p>But you can also force line breaks<br/> by adding a backslash at the end of the line (but this is only possible if <code class=\"w3-codespan\">pymdownx.escapeall: hardbreak: true</code> is set in <code class=\"w3-codespan\">markdown_extensions</code>).</p> <p>Words can be highlighted in <strong>bold</strong> and <em>italic</em>, but <a href=\"\">underline</a> is reserved for links.</p> <p>There can be <code class=\"w3-codespan\">code</code> within a paragraph.</p> <pre class=\"w3-code w3-responsive\"><code class=\"language-plaintext\">That is shown inside a code window with all formatting intact. </code></pre> <p class=\"font-lobster w3-panel w3-leftbar w3-rightbar w3-border-red\">CSS classes can also be added to paragraphs (<code class=\"w3-codespan\">attr_list</code> in <code class=\"w3-codespan\">markdown_extensions</code> is required).</p> <div class=\"w3-panel w3-theme-l3 w3-leftbar w3-border-theme\"> <p>This is a citation.</p> </div> <p>This is a list:</p> <ul> <li>Apples</li> <li>Pears</li> <li>Plums</li> </ul> <p>This is a numbered list:</p> <ol> <li>Walnuts</li> <li>Almonds</li> <li>Hazelnuts (Numbering is continued automatically)</li> </ol> <p>This is a table:</p> <div class=\"w3-responsive\"><table class=\"w3-table w3-bordered w3-striped\"> <thead> <tr> <th>Fruit</th> <th>Nuts</th> <th>Pulse</th> </tr> </thead> <tbody> <tr> <td>Apples</td> <td>Almonds</td> <td>Beans</td> </tr> <tr> <td>Plums</td> <td>Walnuts</td> <td>Peanuts</td> </tr> <tr> <td>Pears</td> <td>Hazelnuts</td> <td>Peas</td> </tr> </tbody> </table></div> <p>This is an image: <img alt=\"\" class=\"w3-image\" src=\"../../img/logo192.png\"/></p> <p>Furthermore inline HTML is possible: <svg class=\"svg-1em\"><use xlink:href=\"#encrypted\"></use></svg>.</p>", "title": "Markdown"}, {"location": "markdown/#this-is-a-title", "text": "", "title": "This is a title"}, {"location": "markdown/#this-is-a-heading", "text": "", "title": "This is a heading"}, {"location": "markdown/#this-is-a-subheading", "text": "", "title": "This is a subheading"}, {"location": "markdown/#this-is-a-subsubheading-not-shown-in-toc", "text": "This is a paragraph. Normal line breaks are ignored. You can force line breaks by adding two spaces at the end of the line (but this is invisible in some editors). But you can also force line breaks by adding a backslash at the end of the line (but this is only possible if pymdownx.escapeall: hardbreak: true is set in markdown_extensions ). Words can be highlighted in bold and italic , but underline is reserved for links. There can be code within a paragraph. That is shown inside a code window with all formatting intact. CSS classes can also be added to paragraphs ( attr_list in markdown_extensions is required). This is a citation. This is a list: Apples Pears Plums This is a numbered list: Walnuts Almonds Hazelnuts (Numbering is continued automatically) This is a table: Fruit Nuts Pulse Apples Almonds Beans Plums Walnuts Peanuts Pears Hazelnuts Peas This is an image: Furthermore inline HTML is possible: .", "title": "This is a subsubheading (not shown in toc)"}, {"location": "markdown/#this-is-how-the-page-looks-in-markdown", "text": "title: Markdown Test, TEst, tEst, test... <!-- \"title\" is shown in top bar --> # This is a title ## This is a heading ### This is a subheading #### This is a subsubheading (not shown in toc) This is a paragraph. Normal line breaks are ignored. You can force line breaks by adding two spaces at the end of the line (but this is invisible in some editors). But you can also force line breaks\\ by adding a backslash at the end of the line (but this is only possible if `pymdownx.escapeall: hardbreak: true` is set in `markdown_extensions`). Words can be highlighted in **bold** and *italic*, but [underline]() is reserved for links. There can be `code` within a paragraph. \\```plaintext That is shown inside a code window with all formatting intact. \\``` CSS classes can also be added to paragraphs (`attr_list` in `markdown_extensions` is required). { .font-lobster .w3-panel .w3-leftbar .w3-rightbar .w3-border-red } > This is a citation. This is a list: * Apples * Pears * Plums This is a numbered list: 1. Walnuts 2. Almonds 2. Hazelnuts (Numbering is continued automatically) This is a table: | Fruit | Nuts | Pulse | | ---- | ---- | ---- | | Apples | Almonds | Beans | | Plums | Walnuts | Peanuts | | Pears | Hazelnuts | Peas | This is an image: ![](../../img/logo192.png) Furthermore inline HTML is possible: <svg class=\"svg-1em\"><use xlink:href=\"#encrypted\" /></svg>.", "title": "This is how the page looks in Markdown:"}, {"location": "markdown/#this-is-how-the-page-looks-in-html", "text": "<!-- \"title\" is shown in top bar --> <h1 id=\"this-is-a-title\">This is a title</h1> <h2 id=\"this-is-a-heading\">This is a heading</h2> <h3 id=\"this-is-a-subheading\">This is a subheading</h3> <h4 id=\"this-is-a-subsubheading-not-shown-in-toc\">This is a subsubheading (not shown in toc)</h4> <p>This is a paragraph.</p> <p>Normal line breaks are ignored.</p> <p>You can force line breaks<br/> by adding two spaces at the end of the line (but this is invisible in some editors).</p> <p>But you can also force line breaks<br/> by adding a backslash at the end of the line (but this is only possible if <code class=\"w3-codespan\">pymdownx.escapeall: hardbreak: true</code> is set in <code class=\"w3-codespan\">markdown_extensions</code>).</p> <p>Words can be highlighted in <strong>bold</strong> and <em>italic</em>, but <a href=\"\">underline</a> is reserved for links.</p> <p>There can be <code class=\"w3-codespan\">code</code> within a paragraph.</p> <pre class=\"w3-code w3-responsive\"><code class=\"language-plaintext\">That is shown inside a code window with all formatting intact. </code></pre> <p class=\"font-lobster w3-panel w3-leftbar w3-rightbar w3-border-red\">CSS classes can also be added to paragraphs (<code class=\"w3-codespan\">attr_list</code> in <code class=\"w3-codespan\">markdown_extensions</code> is required).</p> <div class=\"w3-panel w3-theme-l3 w3-leftbar w3-border-theme\"> <p>This is a citation.</p> </div> <p>This is a list:</p> <ul> <li>Apples</li> <li>Pears</li> <li>Plums</li> </ul> <p>This is a numbered list:</p> <ol> <li>Walnuts</li> <li>Almonds</li> <li>Hazelnuts (Numbering is continued automatically)</li> </ol> <p>This is a table:</p> <div class=\"w3-responsive\"><table class=\"w3-table w3-bordered w3-striped\"> <thead> <tr> <th>Fruit</th> <th>Nuts</th> <th>Pulse</th> </tr> </thead> <tbody> <tr> <td>Apples</td> <td>Almonds</td> <td>Beans</td> </tr> <tr> <td>Plums</td> <td>Walnuts</td> <td>Peanuts</td> </tr> <tr> <td>Pears</td> <td>Hazelnuts</td> <td>Peas</td> </tr> </tbody> </table></div> <p>This is an image: <img alt=\"\" class=\"w3-image\" src=\"../../img/logo192.png\"/></p> <p>Furthermore inline HTML is possible: <svg class=\"svg-1em\"><use xlink:href=\"#encrypted\"></use></svg>.</p>", "title": "This is how the page looks in HTML:"}, {"location": "mkdocs/", "text": "Introduction Taken from MkDocs Page: MkDocs is a fast , simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. Start by reading the introductory tutorial , then check the User Guide for more information. Themes MkDocs includes two built-in themes ( mkdocs and readthedocs ). However, many third party themes are available to choose from as well. Size comparison I once (as of 2022-12-14) generated this site using different themes to get a sense of the size of the generated site. All size indications in kilobytes (rounded up). Theme Version HTML CSS JS/JSON/MAP Webfonts Miscellaneous Total risonia 0.1 712 213 439 76 807 2247 mkdocs 1.4.2 593 203 597 1030 803 3226 material 8.5.10 1045 151 2183 76 801 4256 material 8.4.4-insiders 1110 534 2946 703 801 6094 HTML, CSS, JS should be somewhat comparable, whereat Risonia doesn't use \"minify\". To be fair the material theme uses Pygments instead of highlight.js for code highlighting, which increases the size of HTML. The web font size is not really comperable, because mkdocs f.ex. supplies all flavors of the web fonts for best downward compatibility. Risonia doesn't use web fonts by default. The \"insiders\" version of material was configured with the privacy plugin, so all dependencies were downloaded.", "title": "MkDocs"}, {"location": "mkdocs/#introduction", "text": "Taken from MkDocs Page: MkDocs is a fast , simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. Start by reading the introductory tutorial , then check the User Guide for more information.", "title": "Introduction"}, {"location": "mkdocs/#themes", "text": "MkDocs includes two built-in themes ( mkdocs and readthedocs ). However, many third party themes are available to choose from as well.", "title": "Themes"}, {"location": "mkdocs/#size-comparison", "text": "I once (as of 2022-12-14) generated this site using different themes to get a sense of the size of the generated site. All size indications in kilobytes (rounded up). Theme Version HTML CSS JS/JSON/MAP Webfonts Miscellaneous Total risonia 0.1 712 213 439 76 807 2247 mkdocs 1.4.2 593 203 597 1030 803 3226 material 8.5.10 1045 151 2183 76 801 4256 material 8.4.4-insiders 1110 534 2946 703 801 6094 HTML, CSS, JS should be somewhat comparable, whereat Risonia doesn't use \"minify\". To be fair the material theme uses Pygments instead of highlight.js for code highlighting, which increases the size of HTML. The web font size is not really comperable, because mkdocs f.ex. supplies all flavors of the web fonts for best downward compatibility. Risonia doesn't use web fonts by default. The \"insiders\" version of material was configured with the privacy plugin, so all dependencies were downloaded.", "title": "Size comparison"}, {"location": "colors/", "text": "The color-theme plugin generates the colors of the theme depending on various settings. The usage is optional. theme_color sets the primary color of the theme. This color is consistent through light and dark mode ( ). With secondary_color you can either define a secondary color or a color scheme . The text colors light_text_color and dark_text_color don't need to be black and white. But they aren't explicitly assigned to dark or light mode. They are chosen depending on best contrast. Use options extra_css_light and extra_css_dark to integrate additional CSS to the modes. plugins: #... - color-theme: theme_color: '#ef6110' # primary color secondary_color: 'complementary' # can be a color or scheme light_text_color: '#000' # black dark_text_color: '#fff' # white extra_css_light: # list of extra CSS for light mode - 'css/additional-light.css' extra_css_dark: # list of extra CSS for dark mode - 'css/additional-dark.css' additional: # build these themes also - theme_color: '#44bb4f' secondary_color: 'complementary' #... The settings theme_color and secondary_color can also be set as meta tag in the header of each markdown document. Attention: don't use quotes here. theme_color: #ef6110 secondary_color: mono", "title": "color-theme plugin"}, {"location": "colors/primary/", "text": "These example colors are almost of the same medium perceived brightness . This is why they share good contrast to black and white text color. In addition they are of medium visibility, so the secondary colors in light and dark mode will show similar shades. #bc4342 #c93936 #d62b28 #ef1c10 #bc4a42 #c74438 #c84b37 #c95036 #d53829 #d63f28 #e13f1e #ee2010 #ef3810 #bc5d42 #c75938 #c85837 #c95d36 #d4582a #d55729 #d65c28 #e1561e #e2551d #ee4c10 #ef5210 #bb7444 #bc7342 #c77038 #c87037 #c96f36 #d46b2a #d56429 #d66328 #e15d1e #e25c1d #e26f1d #ee6210 #bb7944 #bc7842 #c77638 #c78538 #c87f37 #c97936 #d4762a #d57a29 #e1701e #bc8742 #44bb4f #44a7bb #42abbc #449fbb #429cbc #389fc7 #38abc7 #37a7c8 #36a3c9 #2aa2d4 #29a2d5 #28a5d6 #1da7e2 #4494bb #4294bc #3893c7 #378fc8 #379bc8 #3697c9 #2a92d4 #2a9ed4 #2996d5 #288ed6 #289ad6 #1e90e1 #1e9ce1 #1d90e2 #1d9ce2 #1091ee #109dee #1095ef #10a1ef #447fbb #427bbc #4288bc #3883c7 #377fc8 #378bc8 #3683c9 #2a79d4 #2a86d4 #297dd5 #298ad5 #2881d6 #1e7be1 #1e88e1 #1d7fe2 #1d8ce2 #1080ee #108dee #1080ef #108def #4473bb #4273bc #386ec7 #3769c8 #3776c8 #3672c9 #2a6cd4 #2967d5 #2975d5 #2870d6 #1e69e1 #1e77e1 #1d6de2 #1060ee #106eee #1065ef #1073ef #446abb #426abc #3760c8 #3665c9 #295ed5 #2862d6 #1d5ae2 #105bee #7644bb #7e42bc #7c36c9 #7d28d6 #7710ee #8544bb #8c42bc #9038c7 #9037c8 #9036c9 #922ad4 #9229d5 #9228d6 #911ee1 #901de2 #8610ee #8510ef #9a10ef #9342bc #9d38c7 #9736c9 #9e2ad4 #9e29d5 #9e28d6 #9d1ee1 #9d1de2 #9a10ee #ad10ee #a610ef #a044bb #a642bc #af38c7 #b037c8 #b036c9 #b72ad4 #b729d5 #b728d6 #b61ee1 #b01de2 #c21de2 #c510ee #bf10ef #ac44bb #ac42bc #b538c7 #b637c8 #b636c9 #bd2ad4 #ce2ad4 #c829d5 #c828d6 #cd1ee1 #c71de2 #d81de2 #d610ee #e710ee #db10ef #bb44b5 #c837c7 #d42ac5 #d428d6 #e11eda #ef10d9 #c738a8 #c936b6 #d529c3 #e11ebb #e21dc9 #c837a6 #d529a1 #e21da7 #ef10a6 #bc4291 #c93693 #d6288b #ee1095 #bc427c #c9367e #d62875 #ee107f #c83768 #d5295e #ee1064 #bc4264 #e21d41 #c8374a #d52939 #bb4447 function copyColor(color) { navigator.clipboard.writeText(color); }", "title": "Primary colors"}, {"location": "colors/secondary/", "text": "Either set secondary_color to a color of choice. title: Secondary colors secondary_color: #7f307F", "title": "Secondary colors"}, {"location": "colors/secondary/analogous/", "text": "If set to analogous two similar colors (30\u00b0) to primary_color will be chosen and mixed for dark/light mode. title: Analogous secondary_color: analogous", "title": "Analogous"}, {"location": "colors/secondary/analogous2/", "text": "If set to analogous2 two similar colors (30\u00b0) to primary_color will be chosen and mixed for dark/light mode. title: Analogous 2 secondary_color: analogous2", "title": "Analogous 2"}, {"location": "colors/secondary/complementary/", "text": "If set to complementary colors opposite to primary_color will be chosen and mixed for dark/light mode. title: Complementary secondary_color: complementary", "title": "Complementary"}, {"location": "colors/secondary/complementary2/", "text": "If set to complementary2 colors opposite to primary_color will be chosen and mixed for dark/light mode. title: Complementary 2 secondary_color: complementary2", "title": "Complementary 2"}, {"location": "colors/secondary/compound/", "text": "If set to compound two colors 150\u00b0 to primary_color will be chosen and mixed for dark/light mode. title: Compound secondary_color: compound", "title": "Compound"}, {"location": "colors/secondary/compound2/", "text": "If set to compound2 two colors 150\u00b0 to primary_color will be chosen and mixed for dark/light mode. title: Compound 2 secondary_color: compound2", "title": "Compound 2"}, {"location": "colors/secondary/mono/", "text": "If set to mono the color in primary_color will be chosen and mixed for dark/light mode. title: Monochomatic secondary_color: mono", "title": "Monochomatic"}, {"location": "colors/secondary/triadic/", "text": "If set to triadic two colors 120\u00b0 to primary_color will be chosen and mixed for dark/light mode. title: Triadic secondary_color: triadic", "title": "Triadic"}, {"location": "colors/secondary/triadic2/", "text": "If set to triadic2 two colors 120\u00b0 to primary_color will be chosen and mixed for dark/light mode. title: Triadic 2 secondary_color: triadic2", "title": "Triadic 2"}, {"location": "encryptcontent_1;Mwbulp7ufE/hcv+QWFP/jg==;iX/R4ghosTQ4XT+kF74yH7rZOcSFN6VGMZrEmChLVmY=", "text": "o/BlW/K2PfwejD2mWS7kdg==;bkr8jJluQcRDIk6FgBaqT1ZqL6OxqeMrxGFzt/0r/JB62FneHpGiiF7Y7yBtb/iMSglAurIkAA8NHUwW96ZRE1+A4a3uoKllZt/f27v0WjraSbfTmp0jffYJO+7dX9EyPO3tQm/397S35f4Mz9UgXcobHfYu85ie8JlWmi1qrRPSGJ/jbU/wmQcO0hgxFpuRlwRVhB4L5G2Pdc0Wn2sFqL98xJBBG2qaoMkr8kDNBLbFLjWZzIyzAr01s6TBvnA3Pa8R8/jl7naWed+UdcNO7U+QloghNnoUv01jX7LdYdSElo1mPnXJOh3ofKgoiAJAXbzlcmExWSs/j4rmO9lefDztjc1vqbOd6rvQtM7EGTXnwVSikn5ldX5qeamEw8gw7K2LWAGzvi7Ec9eyaiRZ52Woas+saLRMNHFFNFe5VyWl180vDy/KdMA8RkajVVR8OH8UeU+M1cQmhkwD9F6+mox0SCz8of75hNYNuFr6R0n12sV8+XVYLVj9hMENHYgYZmeIIcqjkyYShkzVIZJPJnoquzgt5ngQejq5UhE2b+C0A10lZsBOKSEVvdv5skLXOsIPTK2+kHDoVfpr2PtnZCOr05FY21/qZg9PUX8pv9tOmn+XgCvJ5OIIGazWOAz6EcXqW4HZj3nsfWZti4BuCJopdx8sG2g4DtLwt+SBIOXBrNVIh+fhhgZrfYkVvkPoQr9Cn6b+aiuLWBXB0WdwbmLdKPs8b1jvgz0y6pChPvSdM59kXaeNLiRiBE1OzTQr8GsyWMrOP04NLxefy88EaUHUj2u3KrzrBfEEV5HetxA1glLdUbtZWvJpdgA2lRuR7IC1S3ZhzB645CxXiXCBaX7eBxbBkj/M6pBuyizGQWd5c2y3wWbJaOoBadqfXwcuR2JjNp6kFdqegVfue99QIb1JnwTQ+4jmrkR6AdL9mEoH23POKj5PYnIhyhEmpHwtfea2W4/pAwLX+4Vm4WwwJRXN2gMBhZrj0OH0PES5NHUtYLUxXAEd7yOZqWUYh9tgOhIlLekvLP3fM/fJfaCcqlmgzOCy97Wd6Y0yeZCeVc829hyYlDKk320x8OGTXg2s4B/Xnv75G4n/maUgEGLUx2rSkCDRDOElBE9140uKUpHLRtaXjRyXAw37Xnx3sinqmhrx6WK6qCAxn6uaoFHo6b4f2n2OIi1hzIoApML7UpfzNM4vI3WDnli+lv1pvpL422ZUSCWqrnbwyEpFMOS6piRyWlHzYFDDi74mBy2rfjhdF8u8lW14R6lyfBMMR7dKB+2c7WuvQXOyb0LMNT7MhYE36KD+C+k1l/NlRZu0CzGWRzLil/MWrt3VF5yHzp/cQDThPjQ9oZpZBB//1RMfKBVCYpSpAP12RpQEjCjSgPid+yipvuGmb8P/uRdj+/0ZrLRCitQasBRa4GP8DTVjAKNpJvuq/IcjxzBt+Tm5GxT1EGmgUuGyZSZejs7YHc6ylAsl3jGgEJwubh3EOc/D33TASghYCi1UN6HX4R45WTaVS9aPF5kTb2DJMpnOn3jZoYx7hxm5bJFyRVbKP/Jqp3T/ZUE0+cbSmTJQXKaAlX+zHzAnfNG1/vmyAZ/xgRfMEhdvwaPd+RV3sam3VHNgyPUw3NdwGrMjKCMSGWkQb80ePmCafLRTHegKBjrFWdiaVgCZPR/psRy7ISTcyK27FdUpbjQjAj58q2z6z2wfn1ZPE5KbrjUr2wGCewPNcrgs10D4d/E/RInNg9CCg4wrSGP1paIDWx9oQV3+AYLoLrS2slwu6B+y5y4xa8d1TUlPJye1qGSvtwqb6M2VinRVrRFaB+IM5wei1nnPt84lYx56nw+nDRsAPy/Dbv+CG/Hld4SkTAzkCnnYLjjro2VAnNmLC4IzpCMg5O5IFityPLg=", "title": "bkDc1skhRaijK408ZVjAbQ==;9SmDov9u3t1MIcS9sQrG3g=="}, {"location": "extensions/hljs/", "text": "To use hljs download , place it in custom_dir and add to extra_javascript in the mkdocs.yml file. Check the available styles for ones that end with \"-light\" and \"-dark\". You might need to manually edit the CSS to remove background-color properties, because this would override the theme settings. theme: name: risonia custom_dir: theme_override/ extra_javascript: - 'assets/javascripts/highlight.min.js' plugins: #... - color-theme: theme_color: '#ef6110' secondary_color: 'complementary' extra_css_light: - 'extra_css/stackoverflow-light.min.css' #place hljs light theme here extra_css_dark: - 'extra_css/stackoverflow-dark.min.css' #place hljs dark theme here #... You could add the file main.html to custom_dir to override the exec_script block: {% extends \"base.html\" %} {% block exec_script %} <script id=\"theme\"> document.addEventListener('DOMContentLoaded', (event) => { document.querySelectorAll('pre code').forEach((el) => { hljs.highlightElement(el); }); }); </script> {% endblock %} But you can also add said javascript code to the markdown pages that should make use of code highlighting.", "title": "highlight.js"}, {"location": "extensions/static-i18n/", "text": "If the mkdocs-static-i18n plugin is installed, activated in mkdocs.yaml and configured, then the language can be switched through the symbol at the top right of the page. plugins: #... - i18n: default_language: de default_language_only: false docs_structure: suffix languages: default: name: Deutsch build: true en: name: English build: true site_name: \"MkDocs Risonia theme\" nav_translations: en: Farben: Colors Zweitfarben: Secondary colors Erweiterungen: Extensions Javascript: Javascript #... Additional information about language versions is supplied to the search engines via the head of the pages. <!DOCTYPE html> <html lang=\"de\"> <head> <!-- ... --> <link rel=\"alternate\" hreflang=\"fr\" href=\"https://example.com/fr/\"> <link rel=\"alternate\" hreflang=\"en\" href=\"https://example.com/en/\"> <!-- ... --> </head>", "title": "static i18n plugin"}, {"location": "extensions/tablesort/", "text": "Example Player Deaths Frags Latency Coni 106 73 46 Kapu 98 100 33 Le Franzose 91 66 50 TheoneEP 89 87 34 arsh0r 86 88 0 gr3t 72 85 49 BMW Doktor 40 83 47 Installation To use tablesort download a release , place it in custom_dir and add to extra_javascript in the mkdocs.yml file. You can derive a dark theme version of the example CSS by adjusting the border-color property. theme: name: risonia custom_dir: theme_override/ extra_javascript: - 'assets/javascripts/tablesort.js' - 'assets/javascripts/tablesort.number.js' plugins: #... - color-theme: theme_color: '#ef6110' secondary_color: 'complementary' extra_css_light: - 'extra_css/tablesort-light.css' #place tablesort light theme here extra_css_dark: - 'extra_css/tablesort-dark.css' #place tablesort dark theme here #... You could add the file main.html to custom_dir to override the exec_script block: {% extends \"base.html\" %} {% block exec_script %} <script id=\"theme\"> document.addEventListener('DOMContentLoaded', (event) => { document.querySelectorAll('table').forEach(function(table) { if (!table.hasAttribute('Tablesort')) { new Tablesort(table); table.setAttribute('Tablesort', ''); } }); }); </script> {% endblock %} But you can also add said javascript code to the markdown pages that should make use of tables.", "title": "tablesort"}, {"location": "extensions/tablesort/#example", "text": "Player Deaths Frags Latency Coni 106 73 46 Kapu 98 100 33 Le Franzose 91 66 50 TheoneEP 89 87 34 arsh0r 86 88 0 gr3t 72 85 49 BMW Doktor 40 83 47", "title": "Example"}, {"location": "extensions/tablesort/#installation", "text": "To use tablesort download a release , place it in custom_dir and add to extra_javascript in the mkdocs.yml file. You can derive a dark theme version of the example CSS by adjusting the border-color property. theme: name: risonia custom_dir: theme_override/ extra_javascript: - 'assets/javascripts/tablesort.js' - 'assets/javascripts/tablesort.number.js' plugins: #... - color-theme: theme_color: '#ef6110' secondary_color: 'complementary' extra_css_light: - 'extra_css/tablesort-light.css' #place tablesort light theme here extra_css_dark: - 'extra_css/tablesort-dark.css' #place tablesort dark theme here #... You could add the file main.html to custom_dir to override the exec_script block: {% extends \"base.html\" %} {% block exec_script %} <script id=\"theme\"> document.addEventListener('DOMContentLoaded', (event) => { document.querySelectorAll('table').forEach(function(table) { if (!table.hasAttribute('Tablesort')) { new Tablesort(table); table.setAttribute('Tablesort', ''); } }); }); </script> {% endblock %} But you can also add said javascript code to the markdown pages that should make use of tables.", "title": "Installation"}, {"location": "extensions/webfonts/", "text": "Self-host web fonts In order to use web fonts you'll need to download the desired font first. This can be done by using the google-webfonts-helper . The files need to be copied to custom_path and the corresponding fonts.css needs to be added to extra_css . Also the markdown extension attr_list can be used to set the font for individual headings for example. theme: name: risonia custom_dir: theme_override/ extra_css: - 'css/fonts.css' markdown_extensions: - attr_list The paths to the fonts in fonts.css need to be relative to the CSS file in theme_override/css/ . /* lobster-regular - latin */ @font-face { font-family: 'Lobster'; font-style: normal; font-weight: 400; src: local(''), url('../assets/fonts/lobster-v28-latin-regular.woff2') format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */ url('../assets/fonts/lobster-v28-latin-regular.woff') format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */ } .font-lobster { font-family: 'Lobster'; } So the web fonts (woff* files) reside in theme_override/assets/fonts/ in this example. The web font can added to the heading like this: ## Self-host web fonts { .font-lobster }", "title": "Webfonts"}, {"location": "extensions/webfonts/#self-host-web-fonts", "text": "In order to use web fonts you'll need to download the desired font first. This can be done by using the google-webfonts-helper . The files need to be copied to custom_path and the corresponding fonts.css needs to be added to extra_css . Also the markdown extension attr_list can be used to set the font for individual headings for example. theme: name: risonia custom_dir: theme_override/ extra_css: - 'css/fonts.css' markdown_extensions: - attr_list The paths to the fonts in fonts.css need to be relative to the CSS file in theme_override/css/ . /* lobster-regular - latin */ @font-face { font-family: 'Lobster'; font-style: normal; font-weight: 400; src: local(''), url('../assets/fonts/lobster-v28-latin-regular.woff2') format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */ url('../assets/fonts/lobster-v28-latin-regular.woff') format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */ } .font-lobster { font-family: 'Lobster'; } So the web fonts (woff* files) reside in theme_override/assets/fonts/ in this example. The web font can added to the heading like this: ## Self-host web fonts { .font-lobster }", "title": "Self-host web fonts"}, {"location": "de/", "text": "Ein einfaches Thema f\u00fcr MkDocs , basierend auf diesem Demo , dem w3.css Framework und einstellbaren Farbschemen (Inspiration von dort ). Designziele Es soll einfach zu verstehen und modifizierbar sein. Es soll farbenfroh und trotzdem lesbar bleiben. Es soll alle Eigenschaften des normalen MkDocs Themas haben (dauert noch). Es soll einige n\u00fctzlichen Plugins integrieren k\u00f6nnen. Es soll nicht \u00fcbersetzt werden m\u00fcssen. Es soll nicht verschleiern wie es funktioniert. Es soll so wenig Quatsch wie m\u00f6glich enthalten. Bl\u00f6de Kompromisse Wegen w3css m\u00fcssen leider zus\u00e4tzliche Klassen an die Markdownausgabe angef\u00fcgt werden. Aber wenn wir schon mal dabei sind, k\u00f6nnen wir gleich externe Links erkennen und markieren. Die SVG Symbole m\u00fcssen in jede Seite eingef\u00fcgt werden, weil sie sonst nicht in Textfarbe erscheinen k\u00f6nnen. Merkmale Helle und dunkle Ansicht. Integration vom mkdocs-static-i18n Plugin. Integration vom mkdocs-encryptcontent-plugin . Seite kann als Webapp installiert werden. Ziemlich leichtgewichtig Kurze (Navigation) und lange (Oben) Seitentitel Installation \u00dcber Python pip installieren: pip install mkdocs-risonia-theme Oder aus den Quellen bauen mit pip: cd mkdocs-risonia-theme/ python setup.py sdist bdist_wheel pip install dist/mkdocs_risonia_theme-0.1.12-py3-none-any.whl Konfiguration In der mkdocs.yml mit Thema und Plugins konfigurieren: theme: name: risonia #custom_dir: theme_override/ # statische Inhalte und Anpassungen #logo: img/logo.svg # ohne logo wird bei mobilen Ger\u00e4ten ein Burgermen\u00fc angezeigt #favicon: img/logo.ico # sonst wird img/favicon.ico angenommen #manifest: manifest.json # Manifest f\u00fcr Webapp #serviceworker: service-worker.js # Ben\u00f6tigt f\u00fcr Webapp, kann eine leere Datei sein #extlink: true # externe Links markieren #extblank: true # externe Links im neuen Browserfenster \u00f6ffnen #toc_sidebar: true # Wenn Anzeige breit genug, dann Inhaltsverzeichnis rechts anzeigen #zoom_img: true # beim Klicken auf ein Bild wird es gr\u00f6\u00dfer angezeigt plugins: - search: {} #- i18n: {...} # mkdocs-static-i18n - color-theme: #optional theme_color: '#ff6600' # Hauptfarbe secondary_color: 'complementary' # Zweitfarbe oder Farbschema #extra_css_light: # Liste mit zu\u00e4tzlichen CSS Dateien f\u00fcr die helle Ansicht # - 'css/additional-light.css' #extra_css_dark: # Liste mit zu\u00e4tzlichen CSS Dateien f\u00fcr die dunkle Ansicht # - 'css/additional-dark.css' - w3css-classes: {} # n\u00f6tig #- encryptcontent: {...} # mkdocs-encryptcontent-plugin Anpassungen \u00dcber die Datei main.html im custom_dir k\u00f6nnen verschiedene Bl\u00f6cke aus der Vorlage \u00fcberschieben oder erweitert werden: {% extends \"base.html\" %} {% block exec_script %} <script> var DOMContentLoaded_fired = false; </script> <script id=\"theme\"> function runWhenDOMContentLoaded() { document.querySelectorAll('pre code').forEach((el) => { hljs.highlightElement(el); }); document.querySelectorAll('table').forEach(function(table) { if (!table.hasAttribute('Tablesort')) { new Tablesort(table); table.setAttribute('Tablesort', ''); } }); } if (DOMContentLoaded_fired) { runWhenDOMContentLoaded(); } </script> <script> document.addEventListener('DOMContentLoaded',function(){ DOMContentLoaded_fired=true; runWhenDOMContentLoaded(); }); </script> {% endblock %} {%- block footer_ext %} <p class=\"w3-right w3-tiny\"> {%- if i18n_config and i18n_page_file_locale %} <a href=\"{{ (i18n_page_locale + '/imprint/') | url }}\">Imprint</a> {%- else %} <a href=\"{{ 'imprint/' | url }}\">Impressum</a> {%- endif %} </p> {%- endblock %} {%- block top_buttons %} <a class=\"w3-button w3-theme-d1 w3-hover-theme w3-padding-small w3-right no-print\" href=\"{{ config.repo_url }}\" target=\"_blank\">&lt;/&gt;</a> {%- endblock %} Seitentitel Normalerweise w\u00fcrde sich der Seitentitel in nav der Konfigurationsdatei gegen # und title in der Markdowndatei durchsetzen. Aber in diesem Thema wird title f\u00fcr die Titelleiste verwendet wenn es definiert wurde. Wenn z.B. in der Navigation ein Titel gesetzt wurde wird dieser in der Navigation verwendet: nav: - Kurztitel: 'index.md' Und in der index.md Datei kann man so den Titel f\u00fcr die Titelleiste definieren: title: Langer, ausf\u00fchrlicher Titel", "title": "Risonia Thema"}, {"location": "de/#designziele", "text": "Es soll einfach zu verstehen und modifizierbar sein. Es soll farbenfroh und trotzdem lesbar bleiben. Es soll alle Eigenschaften des normalen MkDocs Themas haben (dauert noch). Es soll einige n\u00fctzlichen Plugins integrieren k\u00f6nnen. Es soll nicht \u00fcbersetzt werden m\u00fcssen. Es soll nicht verschleiern wie es funktioniert. Es soll so wenig Quatsch wie m\u00f6glich enthalten.", "title": "Designziele"}, {"location": "de/#blode-kompromisse", "text": "Wegen w3css m\u00fcssen leider zus\u00e4tzliche Klassen an die Markdownausgabe angef\u00fcgt werden. Aber wenn wir schon mal dabei sind, k\u00f6nnen wir gleich externe Links erkennen und markieren. Die SVG Symbole m\u00fcssen in jede Seite eingef\u00fcgt werden, weil sie sonst nicht in Textfarbe erscheinen k\u00f6nnen.", "title": "Bl\u00f6de Kompromisse"}, {"location": "de/#merkmale", "text": "Helle und dunkle Ansicht. Integration vom mkdocs-static-i18n Plugin. Integration vom mkdocs-encryptcontent-plugin . Seite kann als Webapp installiert werden. Ziemlich leichtgewichtig Kurze (Navigation) und lange (Oben) Seitentitel", "title": "Merkmale"}, {"location": "de/#installation", "text": "\u00dcber Python pip installieren: pip install mkdocs-risonia-theme Oder aus den Quellen bauen mit pip: cd mkdocs-risonia-theme/ python setup.py sdist bdist_wheel pip install dist/mkdocs_risonia_theme-0.1.12-py3-none-any.whl", "title": "Installation"}, {"location": "de/#konfiguration", "text": "In der mkdocs.yml mit Thema und Plugins konfigurieren: theme: name: risonia #custom_dir: theme_override/ # statische Inhalte und Anpassungen #logo: img/logo.svg # ohne logo wird bei mobilen Ger\u00e4ten ein Burgermen\u00fc angezeigt #favicon: img/logo.ico # sonst wird img/favicon.ico angenommen #manifest: manifest.json # Manifest f\u00fcr Webapp #serviceworker: service-worker.js # Ben\u00f6tigt f\u00fcr Webapp, kann eine leere Datei sein #extlink: true # externe Links markieren #extblank: true # externe Links im neuen Browserfenster \u00f6ffnen #toc_sidebar: true # Wenn Anzeige breit genug, dann Inhaltsverzeichnis rechts anzeigen #zoom_img: true # beim Klicken auf ein Bild wird es gr\u00f6\u00dfer angezeigt plugins: - search: {} #- i18n: {...} # mkdocs-static-i18n - color-theme: #optional theme_color: '#ff6600' # Hauptfarbe secondary_color: 'complementary' # Zweitfarbe oder Farbschema #extra_css_light: # Liste mit zu\u00e4tzlichen CSS Dateien f\u00fcr die helle Ansicht # - 'css/additional-light.css' #extra_css_dark: # Liste mit zu\u00e4tzlichen CSS Dateien f\u00fcr die dunkle Ansicht # - 'css/additional-dark.css' - w3css-classes: {} # n\u00f6tig #- encryptcontent: {...} # mkdocs-encryptcontent-plugin", "title": "Konfiguration"}, {"location": "de/#anpassungen", "text": "\u00dcber die Datei main.html im custom_dir k\u00f6nnen verschiedene Bl\u00f6cke aus der Vorlage \u00fcberschieben oder erweitert werden: {% extends \"base.html\" %} {% block exec_script %} <script> var DOMContentLoaded_fired = false; </script> <script id=\"theme\"> function runWhenDOMContentLoaded() { document.querySelectorAll('pre code').forEach((el) => { hljs.highlightElement(el); }); document.querySelectorAll('table').forEach(function(table) { if (!table.hasAttribute('Tablesort')) { new Tablesort(table); table.setAttribute('Tablesort', ''); } }); } if (DOMContentLoaded_fired) { runWhenDOMContentLoaded(); } </script> <script> document.addEventListener('DOMContentLoaded',function(){ DOMContentLoaded_fired=true; runWhenDOMContentLoaded(); }); </script> {% endblock %} {%- block footer_ext %} <p class=\"w3-right w3-tiny\"> {%- if i18n_config and i18n_page_file_locale %} <a href=\"{{ (i18n_page_locale + '/imprint/') | url }}\">Imprint</a> {%- else %} <a href=\"{{ 'imprint/' | url }}\">Impressum</a> {%- endif %} </p> {%- endblock %} {%- block top_buttons %} <a class=\"w3-button w3-theme-d1 w3-hover-theme w3-padding-small w3-right no-print\" href=\"{{ config.repo_url }}\" target=\"_blank\">&lt;/&gt;</a> {%- endblock %}", "title": "Anpassungen"}, {"location": "de/#seitentitel", "text": "Normalerweise w\u00fcrde sich der Seitentitel in nav der Konfigurationsdatei gegen # und title in der Markdowndatei durchsetzen. Aber in diesem Thema wird title f\u00fcr die Titelleiste verwendet wenn es definiert wurde. Wenn z.B. in der Navigation ein Titel gesetzt wurde wird dieser in der Navigation verwendet: nav: - Kurztitel: 'index.md' Und in der index.md Datei kann man so den Titel f\u00fcr die Titelleiste definieren: title: Langer, ausf\u00fchrlicher Titel", "title": "Seitentitel"}, {"location": "encryptcontent_5;fzBlGH6GG7f1UvN0qI2akQ==;athIdygfOy1/y6pKCfn5Aw==", "text": "I1tUr5VkK5Zjf/aW+NCFMQ==;2WhPlqgo8GZ43v+s8438lkUB5zeRx92VR4nlwiDzWh1eWJFY8vm1UuITOh517/jVISZ5btuSpSBgnh12xeZqQEANK8qZv2RPTL4pucbfijj0Fblp9ddGeimu78tmDFU200uFRZdQckV4OuMZMVEXkPeZZ4dM0RM/eMbWuo1ej48mTrrHjCQHcEuy2V432xjwAwg9YEjDnl7AQx2B3uMPHwurghiplAqTMA8Odxyq5bsZDfxkdgtHCk0obILVncF5", "title": "aG6GU8TrcSZdX1kLV9Cg0A==;Xc9PfODbBXXLSaLUHXwqSA=="}, {"location": "de/markdown/", "text": "Dies ist der Seitentitel Dies eine \u00dcberschrift Und eine Unter\u00fcberschrift Und eine Unterunter\u00fcberschrift (wird nicht mehr im Inhaltsverzeichnis angezeigt) Dies ist ein Absatz. Normale Zeilenumbr\u00fcche werden ignoriert. Man kann Zeilenumbr\u00fcche mit zwei Leerzeichen am Zeilenende erzwingen (dies bleibt aber leider in einigen Editoren unsichtbar). Aber man kann Zeilenumbr\u00fcche auch durch Backslash am Zeilenende erzwingen. (dies setzt allerdings pymdownx.escapeall: hardbreak: true in den markdown_extensions voraus). Man kann Worte fett oder kursiv hervorheben, unterstrichen werden allerdings nur Links. Man kann im Text auf Code verweisen. Der dann in einem Codefenster inklusive der Formatierung erhalten bleibt. Ein Absatz kann auch CSS Klassen erhalten (Voraussetzung ist attr_list in den markdown_extensions ). Dies ist ein Zitat. Dies ist eine Liste: \u00c4pfel Birnen Pflaumen Und dies eine nummerierte Liste: Waln\u00fcsse Mandeln Haseln\u00fcsse (Nummerierung wird automatisch fortgesetzt) Die ist eine Tabelle: Fr\u00fcchte N\u00fcsse H\u00fclsenfr\u00fcchte \u00c4pfel Mandeln Bohnen Pflaumen Waln\u00fcsse Erdn\u00fcsse Birnen Haseln\u00fcsse Erbsen Hier ein Bild: Au\u00dferdem ist inline HTML m\u00f6glich: . So sieht der Markdowntext dieser Seite aus: title: Markdown Test, TEst, tEst, test... <!-- \"title\" wird in der Titelleiste angezeigt --> # Dies ist der Seitentitel ## Dies eine \u00dcberschrift ### Und eine Unter\u00fcberschrift #### Und eine Unterunter\u00fcberschrift (wird nicht mehr im Inhaltsverzeichnis angezeigt) Dies ist ein Absatz. Normale Zeilenumbr\u00fcche werden ignoriert. Man kann Zeilenumbr\u00fcche mit zwei Leerzeichen am Zeilenende erzwingen (dies bleibt aber leider in einigen Editoren unsichtbar). Aber man kann Zeilenumbr\u00fcche\\ auch durch Backslash am Zeilenende erzwingen. (dies setzt allerdings `pymdownx.escapeall: hardbreak: true` in den `markdown_extensions` voraus). Man kann Worte **fett** oder *kursiv* hervorheben, [unterstrichen]() werden allerdings nur Links. Man kann im Text auf `Code` verweisen. \\```plaintext Der dann in einem Codefenster inklusive der Formatierung erhalten bleibt. \\``` Ein Absatz kann auch CSS Klassen erhalten (Voraussetzung ist `attr_list` in den `markdown_extensions`). { .font-lobster .w3-panel .w3-leftbar .w3-rightbar .w3-border-red } > Dies ist ein Zitat. Dies ist eine Liste: * \u00c4pfel * Birnen * Pflaumen Und dies eine nummerierte Liste: 1. Waln\u00fcsse 2. Mandeln 2. Haseln\u00fcsse (Nummerierung wird automatisch fortgesetzt) Die ist eine Tabelle: | Fr\u00fcchte | N\u00fcsse | H\u00fclsenfr\u00fcchte | | ---- | ---- | ---- | | \u00c4pfel | Mandeln | Bohnen | | Pflaumen | Waln\u00fcsse | Erdn\u00fcsse | | Birnen | Haseln\u00fcsse | Erbsen | Hier ein Bild: ![](../img/logo192.png) Au\u00dferdem ist inline HTML m\u00f6glich: <svg class=\"svg-1em\"><use xlink:href=\"#encrypted\" /></svg>. Und dieses HTML wird daraus erzeugt: <!-- \"title\" wird in der Titelleiste angezeigt --> <h1 id=\"dies-ist-der-seitentitel\">Dies ist der Seitentitel</h1> <h2 id=\"dies-eine-uberschrift\">Dies eine \u00dcberschrift</h2> <h3 id=\"und-eine-unteruberschrift\">Und eine Unter\u00fcberschrift</h3> <h4 id=\"und-eine-unterunteruberschrift-wird-nicht-mehr-im-inhaltsverzeichnis-angezeigt\">Und eine Unterunter\u00fcberschrift (wird nicht mehr im Inhaltsverzeichnis angezeigt)</h4> <p>Dies ist ein Absatz.</p> <p>Normale Zeilenumbr\u00fcche werden ignoriert.</p> <p>Man kann Zeilenumbr\u00fcche<br/> mit zwei Leerzeichen am Zeilenende erzwingen (dies bleibt aber leider in einigen Editoren unsichtbar).</p> <p>Aber man kann Zeilenumbr\u00fcche<br/> auch durch Backslash am Zeilenende erzwingen. (dies setzt allerdings <code class=\"w3-codespan\">pymdownx.escapeall: hardbreak: true</code> in den <code class=\"w3-codespan\">markdown_extensions</code> voraus).</p> <p>Man kann Worte <strong>fett</strong> oder <em>kursiv</em> hervorheben, <a href=\"\">unterstrichen</a> werden allerdings nur Links.</p> <p>Man kann im Text auf <code class=\"w3-codespan\">Code</code> verweisen.</p> <pre class=\"w3-code w3-responsive\"><code class=\"language-plaintext\">Der dann in einem Codefenster inklusive der Formatierung erhalten bleibt. </code></pre> <p class=\"font-lobster w3-panel w3-leftbar w3-rightbar w3-border-red\">Ein Absatz kann auch CSS Klassen erhalten (Voraussetzung ist <code class=\"w3-codespan\">attr_list</code> in den <code class=\"w3-codespan\">markdown_extensions</code>).</p> <div class=\"w3-panel w3-theme-l3 w3-leftbar w3-border-theme\"> <p>Dies ist ein Zitat.</p> </div> <p>Dies ist eine Liste:</p> <ul> <li>\u00c4pfel</li> <li>Birnen</li> <li>Pflaumen</li> </ul> <p>Und dies eine nummerierte Liste:</p> <ol> <li>Waln\u00fcsse</li> <li>Mandeln</li> <li>Haseln\u00fcsse (Nummerierung wird automatisch fortgesetzt)</li> </ol> <p>Die ist eine Tabelle:</p> <div class=\"w3-responsive\"><table class=\"w3-table w3-bordered w3-striped\"> <thead> <tr> <th>Fr\u00fcchte</th> <th>N\u00fcsse</th> <th>H\u00fclsenfr\u00fcchte</th> </tr> </thead> <tbody> <tr> <td>\u00c4pfel</td> <td>Mandeln</td> <td>Bohnen</td> </tr> <tr> <td>Pflaumen</td> <td>Waln\u00fcsse</td> <td>Erdn\u00fcsse</td> </tr> <tr> <td>Birnen</td> <td>Haseln\u00fcsse</td> <td>Erbsen</td> </tr> </tbody> </table></div> <p>Hier ein Bild: <img alt=\"\" class=\"w3-image\" src=\"../img/logo192.png\"/></p> <p>Au\u00dferdem ist inline HTML m\u00f6glich: <svg class=\"svg-1em\"><use xlink:href=\"#encrypted\"></use></svg>.</p>", "title": "Markdown"}, {"location": "de/markdown/#dies-ist-der-seitentitel", "text": "", "title": "Dies ist der Seitentitel"}, {"location": "de/markdown/#dies-eine-uberschrift", "text": "", "title": "Dies eine \u00dcberschrift"}, {"location": "de/markdown/#und-eine-unteruberschrift", "text": "", "title": "Und eine Unter\u00fcberschrift"}, {"location": "de/markdown/#und-eine-unterunteruberschrift-wird-nicht-mehr-im-inhaltsverzeichnis-angezeigt", "text": "Dies ist ein Absatz. Normale Zeilenumbr\u00fcche werden ignoriert. Man kann Zeilenumbr\u00fcche mit zwei Leerzeichen am Zeilenende erzwingen (dies bleibt aber leider in einigen Editoren unsichtbar). Aber man kann Zeilenumbr\u00fcche auch durch Backslash am Zeilenende erzwingen. (dies setzt allerdings pymdownx.escapeall: hardbreak: true in den markdown_extensions voraus). Man kann Worte fett oder kursiv hervorheben, unterstrichen werden allerdings nur Links. Man kann im Text auf Code verweisen. Der dann in einem Codefenster inklusive der Formatierung erhalten bleibt. Ein Absatz kann auch CSS Klassen erhalten (Voraussetzung ist attr_list in den markdown_extensions ). Dies ist ein Zitat. Dies ist eine Liste: \u00c4pfel Birnen Pflaumen Und dies eine nummerierte Liste: Waln\u00fcsse Mandeln Haseln\u00fcsse (Nummerierung wird automatisch fortgesetzt) Die ist eine Tabelle: Fr\u00fcchte N\u00fcsse H\u00fclsenfr\u00fcchte \u00c4pfel Mandeln Bohnen Pflaumen Waln\u00fcsse Erdn\u00fcsse Birnen Haseln\u00fcsse Erbsen Hier ein Bild: Au\u00dferdem ist inline HTML m\u00f6glich: .", "title": "Und eine Unterunter\u00fcberschrift (wird nicht mehr im Inhaltsverzeichnis angezeigt)"}, {"location": "de/markdown/#so-sieht-der-markdowntext-dieser-seite-aus", "text": "title: Markdown Test, TEst, tEst, test... <!-- \"title\" wird in der Titelleiste angezeigt --> # Dies ist der Seitentitel ## Dies eine \u00dcberschrift ### Und eine Unter\u00fcberschrift #### Und eine Unterunter\u00fcberschrift (wird nicht mehr im Inhaltsverzeichnis angezeigt) Dies ist ein Absatz. Normale Zeilenumbr\u00fcche werden ignoriert. Man kann Zeilenumbr\u00fcche mit zwei Leerzeichen am Zeilenende erzwingen (dies bleibt aber leider in einigen Editoren unsichtbar). Aber man kann Zeilenumbr\u00fcche\\ auch durch Backslash am Zeilenende erzwingen. (dies setzt allerdings `pymdownx.escapeall: hardbreak: true` in den `markdown_extensions` voraus). Man kann Worte **fett** oder *kursiv* hervorheben, [unterstrichen]() werden allerdings nur Links. Man kann im Text auf `Code` verweisen. \\```plaintext Der dann in einem Codefenster inklusive der Formatierung erhalten bleibt. \\``` Ein Absatz kann auch CSS Klassen erhalten (Voraussetzung ist `attr_list` in den `markdown_extensions`). { .font-lobster .w3-panel .w3-leftbar .w3-rightbar .w3-border-red } > Dies ist ein Zitat. Dies ist eine Liste: * \u00c4pfel * Birnen * Pflaumen Und dies eine nummerierte Liste: 1. Waln\u00fcsse 2. Mandeln 2. Haseln\u00fcsse (Nummerierung wird automatisch fortgesetzt) Die ist eine Tabelle: | Fr\u00fcchte | N\u00fcsse | H\u00fclsenfr\u00fcchte | | ---- | ---- | ---- | | \u00c4pfel | Mandeln | Bohnen | | Pflaumen | Waln\u00fcsse | Erdn\u00fcsse | | Birnen | Haseln\u00fcsse | Erbsen | Hier ein Bild: ![](../img/logo192.png) Au\u00dferdem ist inline HTML m\u00f6glich: <svg class=\"svg-1em\"><use xlink:href=\"#encrypted\" /></svg>.", "title": "So sieht der Markdowntext dieser Seite aus:"}, {"location": "de/markdown/#und-dieses-html-wird-daraus-erzeugt", "text": "<!-- \"title\" wird in der Titelleiste angezeigt --> <h1 id=\"dies-ist-der-seitentitel\">Dies ist der Seitentitel</h1> <h2 id=\"dies-eine-uberschrift\">Dies eine \u00dcberschrift</h2> <h3 id=\"und-eine-unteruberschrift\">Und eine Unter\u00fcberschrift</h3> <h4 id=\"und-eine-unterunteruberschrift-wird-nicht-mehr-im-inhaltsverzeichnis-angezeigt\">Und eine Unterunter\u00fcberschrift (wird nicht mehr im Inhaltsverzeichnis angezeigt)</h4> <p>Dies ist ein Absatz.</p> <p>Normale Zeilenumbr\u00fcche werden ignoriert.</p> <p>Man kann Zeilenumbr\u00fcche<br/> mit zwei Leerzeichen am Zeilenende erzwingen (dies bleibt aber leider in einigen Editoren unsichtbar).</p> <p>Aber man kann Zeilenumbr\u00fcche<br/> auch durch Backslash am Zeilenende erzwingen. (dies setzt allerdings <code class=\"w3-codespan\">pymdownx.escapeall: hardbreak: true</code> in den <code class=\"w3-codespan\">markdown_extensions</code> voraus).</p> <p>Man kann Worte <strong>fett</strong> oder <em>kursiv</em> hervorheben, <a href=\"\">unterstrichen</a> werden allerdings nur Links.</p> <p>Man kann im Text auf <code class=\"w3-codespan\">Code</code> verweisen.</p> <pre class=\"w3-code w3-responsive\"><code class=\"language-plaintext\">Der dann in einem Codefenster inklusive der Formatierung erhalten bleibt. </code></pre> <p class=\"font-lobster w3-panel w3-leftbar w3-rightbar w3-border-red\">Ein Absatz kann auch CSS Klassen erhalten (Voraussetzung ist <code class=\"w3-codespan\">attr_list</code> in den <code class=\"w3-codespan\">markdown_extensions</code>).</p> <div class=\"w3-panel w3-theme-l3 w3-leftbar w3-border-theme\"> <p>Dies ist ein Zitat.</p> </div> <p>Dies ist eine Liste:</p> <ul> <li>\u00c4pfel</li> <li>Birnen</li> <li>Pflaumen</li> </ul> <p>Und dies eine nummerierte Liste:</p> <ol> <li>Waln\u00fcsse</li> <li>Mandeln</li> <li>Haseln\u00fcsse (Nummerierung wird automatisch fortgesetzt)</li> </ol> <p>Die ist eine Tabelle:</p> <div class=\"w3-responsive\"><table class=\"w3-table w3-bordered w3-striped\"> <thead> <tr> <th>Fr\u00fcchte</th> <th>N\u00fcsse</th> <th>H\u00fclsenfr\u00fcchte</th> </tr> </thead> <tbody> <tr> <td>\u00c4pfel</td> <td>Mandeln</td> <td>Bohnen</td> </tr> <tr> <td>Pflaumen</td> <td>Waln\u00fcsse</td> <td>Erdn\u00fcsse</td> </tr> <tr> <td>Birnen</td> <td>Haseln\u00fcsse</td> <td>Erbsen</td> </tr> </tbody> </table></div> <p>Hier ein Bild: <img alt=\"\" class=\"w3-image\" src=\"../img/logo192.png\"/></p> <p>Au\u00dferdem ist inline HTML m\u00f6glich: <svg class=\"svg-1em\"><use xlink:href=\"#encrypted\"></use></svg>.</p>", "title": "Und dieses HTML wird daraus erzeugt:"}, {"location": "de/mkdocs/", "text": "Einleitung \u00dcbersetzt von der MkDocs Seite: MkDocs ist ein schneller , einfacher und absolut pr\u00e4chtiger Generator f\u00fcr statische Webseiten gedacht zur Erstellung von Projektdokumentationen. Die Dokumentation wird in Markdown Dateien verfasst, und alles wird mit einer einzelnen YAML Datei konfiguriert. Am besten f\u00e4ngst du mit dem Einsteigertutorial an, danach findest du weitere Informationen im Benutzerhandbuch . Themen MkDocs bringt zwei Themen gleich mit ( mkdocs und readthedocs ). Aber es gibt einige Themen von Drittanbietern die man stattdessen verwenden kann. Gr\u00f6\u00dfenvergleich Ich habe einmal (Stand 14.12.2022) diese Seite mit verschiedenen Themen generiert um ein Gef\u00fchl f\u00fcr die Gr\u00f6\u00dfe der generierten Seiten zu bekommen. Alle Gr\u00f6\u00dfenangaben in Kilobyte (aufgerundet). Thema Version HTML CSS JS/JSON/MAP Webfonts Sonstiges Gesamt risonia 0.1 712 213 439 76 807 2247 mkdocs 1.4.2 593 203 597 1030 803 3226 material 8.5.10 1045 151 2183 76 801 4256 material 8.4.4-insiders 1110 534 2946 703 801 6094 HTML, CSS, JS m\u00fcsste einigerma\u00dfen vergleichbar sein, wobei Risonia kein \"minify\" verwendet. Allerdings verwendet das material Thema Pygments statt highlight.js um Code einzuf\u00e4rben , was den HTML Teil vergr\u00f6\u00dfert. Bei Webfonts kann man schlecht vergleichen, da mkdocs z.B. aus Abw\u00e4rtskompatibilit\u00e4t s\u00e4mtliche Versionen der Schriftarten mitliefert. Risonia verwendet in der Grundkonfiguration erstmal keine Webfonts. Die \"insiders\" Version von material war mit dem privacy Plugin konfiguriert, es wurde also alle externen Abh\u00e4ngigkeiten nachgeladen.", "title": "MkDocs"}, {"location": "de/mkdocs/#einleitung", "text": "\u00dcbersetzt von der MkDocs Seite: MkDocs ist ein schneller , einfacher und absolut pr\u00e4chtiger Generator f\u00fcr statische Webseiten gedacht zur Erstellung von Projektdokumentationen. Die Dokumentation wird in Markdown Dateien verfasst, und alles wird mit einer einzelnen YAML Datei konfiguriert. Am besten f\u00e4ngst du mit dem Einsteigertutorial an, danach findest du weitere Informationen im Benutzerhandbuch .", "title": "Einleitung"}, {"location": "de/mkdocs/#themen", "text": "MkDocs bringt zwei Themen gleich mit ( mkdocs und readthedocs ). Aber es gibt einige Themen von Drittanbietern die man stattdessen verwenden kann.", "title": "Themen"}, {"location": "de/mkdocs/#groenvergleich", "text": "Ich habe einmal (Stand 14.12.2022) diese Seite mit verschiedenen Themen generiert um ein Gef\u00fchl f\u00fcr die Gr\u00f6\u00dfe der generierten Seiten zu bekommen. Alle Gr\u00f6\u00dfenangaben in Kilobyte (aufgerundet). Thema Version HTML CSS JS/JSON/MAP Webfonts Sonstiges Gesamt risonia 0.1 712 213 439 76 807 2247 mkdocs 1.4.2 593 203 597 1030 803 3226 material 8.5.10 1045 151 2183 76 801 4256 material 8.4.4-insiders 1110 534 2946 703 801 6094 HTML, CSS, JS m\u00fcsste einigerma\u00dfen vergleichbar sein, wobei Risonia kein \"minify\" verwendet. Allerdings verwendet das material Thema Pygments statt highlight.js um Code einzuf\u00e4rben , was den HTML Teil vergr\u00f6\u00dfert. Bei Webfonts kann man schlecht vergleichen, da mkdocs z.B. aus Abw\u00e4rtskompatibilit\u00e4t s\u00e4mtliche Versionen der Schriftarten mitliefert. Risonia verwendet in der Grundkonfiguration erstmal keine Webfonts. Die \"insiders\" Version von material war mit dem privacy Plugin konfiguriert, es wurde also alle externen Abh\u00e4ngigkeiten nachgeladen.", "title": "Gr\u00f6\u00dfenvergleich"}, {"location": "de/colors/", "text": "Das color-theme Plugin generiert das farbliche Aussehen anhand von verschiedenen Optionen. Die Verwendung des Plugins ist optional. Mit theme_color wird die Hauptfarbe des Themas festgelegt. Diese Farbe bleibt in der hellen und dunklen Ansicht ( ) gleich. Durch secondary_color wird entweder eine Zweitfarbe oder ein Schema f\u00fcr die Zweitfarben definiert. Die Textfarben unter light_text_color und dark_text_color m\u00fcssen nicht unbedingt Schwarz und Wei\u00df lauten. Sie werden allerdings nicht explizit f\u00fcr helle bzw. dunkle Ansicht verwendet sondern je nach bestem Kontrast ausgew\u00e4hlt. Durch die Option extra_css_light und extra_css_dark k\u00f6nnen zus\u00e4tzliche CSS in das Aussehen der jeweiligen Ansicht eingebunden werden. plugins: #... - color-theme: theme_color: '#ef6110' # Hauptfarbe secondary_color: 'complementary' # Zweitfarbe oder Farbschema light_text_color: '#000' # Schwarz dark_text_color: '#fff' # Weiss extra_css_light: # Liste mit zus\u00e4tzlichen CSS Dateien f\u00fcr die helle Ansicht - 'css/additional-light.css' extra_css_dark: # Liste mit zus\u00e4tzlichen CSS Dateien f\u00fcr die dunkle Ansicht - 'css/additional-dark.css' additional: # Diese themes auch noch erzeugen - theme_color: '#44bb4f' secondary_color: 'complementary' #... Die beiden Einstellungen theme_color und secondary_color k\u00f6nnen auch als Metainformation Im Kopf jeder Markdowndatei individuell festgelegt werden. Achtung: hierbei keine Anf\u00fchrungszeichen verwenden. theme_color: #ef6110 secondary_color: mono", "title": "color-theme Plugin"}, {"location": "de/colors/primary/", "text": "Diese Beispielfarben haben alle eine mittlere wahrgenommene Helligkeit . Sie haben daher einen guten Kontrast zu schwarzer und wei\u00dfer Schriftfarbe. Au\u00dferdem sind sind sie von mittlerer Sichtbarkeit, sodass die Zweitfarben in heller und dunkler Ansicht eine \u00e4hnliche Schattierung aufweisen. #bc4342 #c93936 #d62b28 #ef1c10 #bc4a42 #c74438 #c84b37 #c95036 #d53829 #d63f28 #e13f1e #ee2010 #ef3810 #bc5d42 #c75938 #c85837 #c95d36 #d4582a #d55729 #d65c28 #e1561e #e2551d #ee4c10 #ef5210 #bb7444 #bc7342 #c77038 #c87037 #c96f36 #d46b2a #d56429 #d66328 #e15d1e #e25c1d #e26f1d #ee6210 #bb7944 #bc7842 #c77638 #c78538 #c87f37 #c97936 #d4762a #d57a29 #e1701e #bc8742 #44bb4f #44a7bb #42abbc #449fbb #429cbc #389fc7 #38abc7 #37a7c8 #36a3c9 #2aa2d4 #29a2d5 #28a5d6 #1da7e2 #4494bb #4294bc #3893c7 #378fc8 #379bc8 #3697c9 #2a92d4 #2a9ed4 #2996d5 #288ed6 #289ad6 #1e90e1 #1e9ce1 #1d90e2 #1d9ce2 #1091ee #109dee #1095ef #10a1ef #447fbb #427bbc #4288bc #3883c7 #377fc8 #378bc8 #3683c9 #2a79d4 #2a86d4 #297dd5 #298ad5 #2881d6 #1e7be1 #1e88e1 #1d7fe2 #1d8ce2 #1080ee #108dee #1080ef #108def #4473bb #4273bc #386ec7 #3769c8 #3776c8 #3672c9 #2a6cd4 #2967d5 #2975d5 #2870d6 #1e69e1 #1e77e1 #1d6de2 #1060ee #106eee #1065ef #1073ef #446abb #426abc #3760c8 #3665c9 #295ed5 #2862d6 #1d5ae2 #105bee #7644bb #7e42bc #7c36c9 #7d28d6 #7710ee #8544bb #8c42bc #9038c7 #9037c8 #9036c9 #922ad4 #9229d5 #9228d6 #911ee1 #901de2 #8610ee #8510ef #9a10ef #9342bc #9d38c7 #9736c9 #9e2ad4 #9e29d5 #9e28d6 #9d1ee1 #9d1de2 #9a10ee #ad10ee #a610ef #a044bb #a642bc #af38c7 #b037c8 #b036c9 #b72ad4 #b729d5 #b728d6 #b61ee1 #b01de2 #c21de2 #c510ee #bf10ef #ac44bb #ac42bc #b538c7 #b637c8 #b636c9 #bd2ad4 #ce2ad4 #c829d5 #c828d6 #cd1ee1 #c71de2 #d81de2 #d610ee #e710ee #db10ef #bb44b5 #c837c7 #d42ac5 #d428d6 #e11eda #ef10d9 #c738a8 #c936b6 #d529c3 #e11ebb #e21dc9 #c837a6 #d529a1 #e21da7 #ef10a6 #bc4291 #c93693 #d6288b #ee1095 #bc427c #c9367e #d62875 #ee107f #c83768 #d5295e #ee1064 #bc4264 #e21d41 #c8374a #d52939 #bb4447 function copyColor(color) { navigator.clipboard.writeText(color); }", "title": "Hauptfarben"}, {"location": "de/colors/secondary/", "text": "Als secondary_color kann einfach eine Zweitfarbe festgelegt werden. title: Zweitfarben secondary_color: #7F307F", "title": "Zweitfarben"}, {"location": "de/colors/secondary/analogous/", "text": "Mit der Einstellung analogous werden zwei \u00e4hnliche Farben (30\u00b0) zu primary_color dunkler/heller gemischt je nach Ansicht. title: Analog secondary_color: analogous", "title": "Analog"}, {"location": "de/colors/secondary/analogous2/", "text": "Mit der Einstellung analogous2 werden zwei \u00e4hnliche Farben (30\u00b0) zu primary_color dunkler/heller gemischt je nach Ansicht. title: Analog 2 secondary_color: analogous2", "title": "Analog 2"}, {"location": "de/colors/secondary/complementary/", "text": "Mit der Einstellung complementary werden Farben gegen\u00fcberliegend zu primary_color dunkler/heller gemischt je nach Ansicht. title: Komplement\u00e4r secondary_color: complementary", "title": "Komplement\u00e4r"}, {"location": "de/colors/secondary/complementary2/", "text": "Mit der Einstellung complementary2 werden Farben gegen\u00fcberliegend zu primary_color dunkler/heller gemischt je nach Ansicht. title: Komplement\u00e4r 2 secondary_color: complementary2", "title": "Komplement\u00e4r 2"}, {"location": "de/colors/secondary/compound/", "text": "Mit der Einstellung compound werden zwei Farben 150\u00b0 zu primary_color dunkler/heller gemischt je nach Ansicht. title: Mischung secondary_color: compound", "title": "Mischung"}, {"location": "de/colors/secondary/compound2/", "text": "Mit der Einstellung compound2 werden zwei Farben 150\u00b0 zu primary_color dunkler/heller gemischt je nach Ansicht. title: Mischung 2 secondary_color: compound2", "title": "Mischung 2"}, {"location": "de/colors/secondary/mono/", "text": "Mit der Einstellung mono (Standard) wird die primary_color dunkler/heller gemischt je nach Ansicht. title: Monochromatisch secondary_color: mono", "title": "Monochromatisch"}, {"location": "de/colors/secondary/triadic/", "text": "Mit der Einstellung triadic werden zwei Farben 120\u00b0 zu primary_color dunkler/heller gemischt je nach Ansicht. title: Triadisch secondary_color: triadic", "title": "Triadisch"}, {"location": "de/colors/secondary/triadic2/", "text": "Mit der Einstellung triadic2 werden zwei Farben 120\u00b0 zu primary_color dunkler/heller gemischt je nach Ansicht. title: Triadisch 2 secondary_color: triadic2", "title": "Triadisch 2"}, {"location": "encryptcontent_1;tdH3nIwVj0gZO4peYF9VBA==;VQXIR5oYl0vsCGWHgGiKeJHpiak5aZXS2To2EW6bMwY=", "text": "Q9oEHssJUlpp6AYdz1rcKw==;/qMNDTzRJqYDN00DjWG+bXLYDx1KtjM/2EF5kcCP9MPKwW+GHeYQ2sGR7VUWtH0k/27XXr53LAowVUh0S3Y9abjCi/ze1qQ94Kea5UyO8dMEpMXfXFR/gpmRHg2U1wx9VHs3/C7Yp9IegplAUSATC96AkbYWKqwGpmIV5N6CBzuX5rpTy4/Xhgnza7WyNGTAVbRdo5vSCyqS3+JljXQkRuK4WdA5wN1A8OMt/l2slw3S11fRjhEeynWU9ETHE6UhDYXjFpD5HU01qAaPjewxRaV4nzCxiXMOUWbQhv8SYV0ExuntTuuf6Wjy1aKsrux06dIbfdUO+Y++7XaKkEdLdasuQnGhVEO8r6VA0bIaIE+68PF4JXf7DL4mOnUP76mwUVhriVUvLbbXDM0x5NgyXiIl/AclW0CcjSsB7qgqnPcyft7TyP6AK8oV1u+lj9v08KiOpOWSDzGYQ9O+TWwWTJSTlCgGxhfhOQ2y8duYlWnFAFG3UHoRs530d3OaXCGvZ4FOFasznSGy8nVWzIInrXkp/ixzUfLkrhht82t1YQHH/k9ghOxCuWpI+zi5knpqucUtVPbNVYhOA811/O7DKBheWTeCROwh5Z9y0POe0P00j6Q+i2qCpHo8HbXXsE7iZinltsaJBVo6lXrvaivbMI3Wpf6VfNorG/QFlXrSRFXlcc5IdGArFuhXgzcDyzW1IYRWkZNv6vMfNAC28Gi3EzRTwO/+gpg6IZMOCQ4u2OZaIzPzedzIwGqwedNrVvb1oUX2AGMbe2tTRtUG0OvXzEeaKxLNLbi3l6J4zjWocuQZvPk1pECn/HZOswpZdhhot3hejsCsYhRflEcMJ6lqQgva/jsP6UCKfwUluc1Vsy7DDz6h7oKxL+tRVKjMQXRYVNio4Gpj0w5e20UtVOClmkGt021heu6tA/gomu5z8yqa0MJVaH3S5q+CSRCAuwWGc/XmhzC0furvXH8nf4X/c0pbmJkcyALwCAmaw6P/4KIVk6VQcknT567+/ZFy280JeEt1XcnnLtRiD/O+Ct1U66T/3WOMmDrKIC8oq06zTUOglINOq/sIjYZhRFClkygYJWl12Bja3nBxxK2jyHz2b6BVlGdXkX0VdRaXZt1kMM9cjnMIug7LS2f6P7LlMYa8bcg/+NgOArBalai8Nlsken0mv08ZAo/HeUCE7ra74GplXVUvnMIYv0c4nokh4hOaWCSDxzKgJ3vGgRMmyrvanJ0+sSvuIQHfX/3WpFTaq/YiB40tPly08ORT3FDiXVGPeTOrnouiUnFjmO5xT4D/w+2uNMUps8sYj0830GWviQ4JK6i3dZcthoSzfvwTZiBCbLXh6A1z+PVLS0aVH52Ho0XoFEIgkLxwSBoAxemI10NljxEOMoiLSKr/a/Errv2aJeMgtgcfL80/GlYjcXqX9auJFdUJ5AX9RhEhJpob//5qpURWtdh7AHppaYEjiu27VFgdF7AsdHuxHuWx3IsOI06tKX5rKK2SeRUTfpEQLnLp6fs1s/2LExz3EtSttMutdripQDfyum8I8r4BbLqPDoItxc/wq66Vq314ab4mTh3Bb8WU/TCJCdgNpLcRfKAiR5ot7WAq5BacLsE1Hg/6JfVbSBaV+oLeBREbT+y+4OCjc0RwhID5pKfRSy1UsNJ+ESzX+JxJW9Hgl+CQLKcz6BiBzXNQUG8tvQe8rC+N66lau5dQbS7wAu4ZgAOOyidfdzY2aLcXjmrLleyzCZfQdIgnNdlkIAQA06RLGzgB6bC34PRjV4WZxfjlk0cqwuXS1JZtFx/BPbvPiCsB3lE4cduJEtIAY+owHG4oEj1YJN2Dv0Vw2wIgVZSakkOlYK4CAKFkU3txBCEIBQx918psMc+sUWsgvbXUdEelHECnF9U/Oy/CWZA/bTpDdHJAazcuT4rLclvzIqFltlNux1MY28AQ/TVYl7fJL5lIz3bS4PjGFRHHVFB7mljtg0grlmVfbvyWepHW2QhAABr73fnF/w==", "title": "0EkkrY6i2C1O6Mv+BpCpeg==;b7Qpe4LYgRReLrwgvMoDtA=="}, {"location": "de/extensions/hljs/", "text": "Um hljs zu nutzen erstmal herunterladen , in custom_dir speichern und als extra_javascript in die mkdocs.yml Datei einf\u00fcgen. Unter den Beispielstylesheets passen die am besten von denen es eine \"-light\" und \"-dark\" Version gibt. An den CSS Dateien muss ggf. noch die background-color Eingenschaft entfernt werden, da dies sonst das Farbthema \u00fcberschreibt. theme: name: risonia custom_dir: theme_override/ extra_javascript: - 'assets/javascripts/highlight.min.js' plugins: #... - color-theme: theme_color: '#ef6110' secondary_color: 'complementary' extra_css_light: - 'extra_css/stackoverflow-light.min.css' #hljs CSS f\u00fcr helle Ansicht extra_css_dark: - 'extra_css/stackoverflow-dark.min.css' #hljs CSS f\u00fcr dunkle Ansicht #... Au\u00dferdem kann man mit Anlegen der Datei main.html in custom_dir noch den exec_script Block \u00fcberschreiben. {% extends \"base.html\" %} {% block exec_script %} <script id=\"theme\"> document.addEventListener('DOMContentLoaded', (event) => { document.querySelectorAll('pre code').forEach((el) => { hljs.highlightElement(el); }); }); </script> {% endblock %} Aber man kann den Javascriptcode auch im Markdown der Seiten einf\u00fcgen die Codeeinf\u00e4rbung ben\u00f6tigen.", "title": "highlight.js"}, {"location": "de/extensions/static-i18n/", "text": "Ist das mkdocs-static-i18n Plugin installiert, in der mkdocs.yaml Datei aktiviert und konfiguriert, dann kann \u00fcber das Symbol rechts oben die Sprache umgeschaltet werden. plugins: #... - i18n: default_language: de default_language_only: false docs_structure: suffix languages: default: name: Deutsch build: true en: name: English build: true site_name: \"MkDocs Risonia theme\" nav_translations: en: Farben: Colors Zweitfarben: Secondary colors Erweiterungen: Extensions Javascript: Javascript #... Suchmaschinen erhalten \u00fcber zus\u00e4tzliche Informationen in den generierten Seiten Hinweise auf die anderen Sprachversionen. <!DOCTYPE html> <html lang=\"de\"> <head> <!-- ... --> <link rel=\"alternate\" hreflang=\"fr\" href=\"https://example.com/fr/\"> <link rel=\"alternate\" hreflang=\"en\" href=\"https://example.com/en/\"> <!-- ... --> </head>", "title": "Static i18n plugin"}, {"location": "de/extensions/tablesort/", "text": "Beispiel Spieler Deaths Frags Latenz Coni 106 73 46 Kapu 98 100 33 Le Franzose 91 66 50 TheoneEP 89 87 34 arsh0r 86 88 0 gr3t 72 85 49 BMW Doktor 40 83 47 Einrichtung Um tablesort zu nutzen erst mal herunterladen , in custom_dir speichern und als extra_javascript in die mkdocs.yml Datei einf\u00fcgen. Aus dem Beispiel CSS kann man durch \u00e4ndern des border-color leicht eine Version f\u00fcr das dunkle Thema machen. theme: name: risonia custom_dir: theme_override/ extra_javascript: - 'assets/javascripts/tablesort.js' - 'assets/javascripts/tablesort.number.js' plugins: #... - color-theme: theme_color: '#ef6110' secondary_color: 'complementary' extra_css_light: - 'extra_css/tablesort-light.css' #tablesort CSS f\u00fcr helle Ansicht extra_css_dark: - 'extra_css/tablesort-dark.css' #tablesort CSS f\u00fcr dunkle Ansicht #... Au\u00dferdem kann man mit Anlegen der Datei main.html in custom_dir noch den exec_script Block \u00fcberschreiben. {% extends \"base.html\" %} {% block exec_script %} <script id=\"theme\"> document.addEventListener('DOMContentLoaded', (event) => { document.querySelectorAll('table').forEach(function(table) { if (!table.hasAttribute('Tablesort')) { new Tablesort(table); table.setAttribute('Tablesort', ''); } }); }); </script> {% endblock %} Aber man kann den Javascriptcode auch im Markdown der Seiten einf\u00fcgen die Tabellen enthalten.", "title": "tablesort"}, {"location": "de/extensions/tablesort/#beispiel", "text": "Spieler Deaths Frags Latenz Coni 106 73 46 Kapu 98 100 33 Le Franzose 91 66 50 TheoneEP 89 87 34 arsh0r 86 88 0 gr3t 72 85 49 BMW Doktor 40 83 47", "title": "Beispiel"}, {"location": "de/extensions/tablesort/#einrichtung", "text": "Um tablesort zu nutzen erst mal herunterladen , in custom_dir speichern und als extra_javascript in die mkdocs.yml Datei einf\u00fcgen. Aus dem Beispiel CSS kann man durch \u00e4ndern des border-color leicht eine Version f\u00fcr das dunkle Thema machen. theme: name: risonia custom_dir: theme_override/ extra_javascript: - 'assets/javascripts/tablesort.js' - 'assets/javascripts/tablesort.number.js' plugins: #... - color-theme: theme_color: '#ef6110' secondary_color: 'complementary' extra_css_light: - 'extra_css/tablesort-light.css' #tablesort CSS f\u00fcr helle Ansicht extra_css_dark: - 'extra_css/tablesort-dark.css' #tablesort CSS f\u00fcr dunkle Ansicht #... Au\u00dferdem kann man mit Anlegen der Datei main.html in custom_dir noch den exec_script Block \u00fcberschreiben. {% extends \"base.html\" %} {% block exec_script %} <script id=\"theme\"> document.addEventListener('DOMContentLoaded', (event) => { document.querySelectorAll('table').forEach(function(table) { if (!table.hasAttribute('Tablesort')) { new Tablesort(table); table.setAttribute('Tablesort', ''); } }); }); </script> {% endblock %} Aber man kann den Javascriptcode auch im Markdown der Seiten einf\u00fcgen die Tabellen enthalten.", "title": "Einrichtung"}, {"location": "de/extensions/webfonts/", "text": "Webfonts selbst hosten Um Webfonts einzubinden muss zuerst die gew\u00fcnschte Schriftart heruntergeladen werden. Das geht z.B. \u00fcber den google-webfonts-helper . Die Dateien m\u00fcssen dann in den custom_path kopiert werden und die fonts.css unter extra_css eingebunden werden. Die Markdownerweiterung attr_list wird ben\u00f6tigt um das Webfont z.B. f\u00fcr einzelne \u00dcberschriften zu verwenden. theme: name: risonia custom_dir: theme_override/ extra_css: - 'css/fonts.css' markdown_extensions: - attr_list Die Pfadangaben in der fonts.css gelten relativ zur CSS Datei die in theme_override/css/ liegt. /* lobster-regular - latin */ @font-face { font-family: 'Lobster'; font-style: normal; font-weight: 400; src: local(''), url('../assets/fonts/lobster-v28-latin-regular.woff2') format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */ url('../assets/fonts/lobster-v28-latin-regular.woff') format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */ } .font-lobster { font-family: 'Lobster'; } Die Webfonts (woff* Dateien) selber liegen also in theme_override/assets/fonts/ . In der Markdown Datei kann das Webfont dann so zugewiesen werden: ## Webfonts selbst hosten { .font-lobster }", "title": "Webfonts"}, {"location": "de/extensions/webfonts/#webfonts-selbst-hosten", "text": "Um Webfonts einzubinden muss zuerst die gew\u00fcnschte Schriftart heruntergeladen werden. Das geht z.B. \u00fcber den google-webfonts-helper . Die Dateien m\u00fcssen dann in den custom_path kopiert werden und die fonts.css unter extra_css eingebunden werden. Die Markdownerweiterung attr_list wird ben\u00f6tigt um das Webfont z.B. f\u00fcr einzelne \u00dcberschriften zu verwenden. theme: name: risonia custom_dir: theme_override/ extra_css: - 'css/fonts.css' markdown_extensions: - attr_list Die Pfadangaben in der fonts.css gelten relativ zur CSS Datei die in theme_override/css/ liegt. /* lobster-regular - latin */ @font-face { font-family: 'Lobster'; font-style: normal; font-weight: 400; src: local(''), url('../assets/fonts/lobster-v28-latin-regular.woff2') format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */ url('../assets/fonts/lobster-v28-latin-regular.woff') format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */ } .font-lobster { font-family: 'Lobster'; } Die Webfonts (woff* Dateien) selber liegen also in theme_override/assets/fonts/ . In der Markdown Datei kann das Webfont dann so zugewiesen werden: ## Webfonts selbst hosten { .font-lobster }", "title": "Webfonts selbst hosten"}]}